// The process creation event provides extended information about a newly
// created process. The full command line provides context on the process
// execution. The ProcessGUID field is a unique value for this process across a
// domain to make event correlation easier. The hash is a full hash of the file
// with the algorithms in the HashType field.
type sysmon.ProcessCreation = record {
    // custom tag mapped to event. i.e ATT&CK technique ID
    RuleName: string,
    // Time in UTC when event was created
    UtcTime: timestamp,
    // Process Guid of the process that got spawned/created (child)
    ProcessGuid: string,
    // Process ID used by the os to identify the created process (child)
    ProcessId: count,
    // File path of the process being spawned/created. Considered also the child or source process
    Image: string,
    // Version of the image associated with the main process (child)
    FileVersion: string,
    // Description of the image associated with the main process (child)
    Description: string,
    // Product name the image associated with the main process (child) belongs to
    Product: string,
    // Company name the image associated with the main process (child) belongs to
    Company: string,
    // original file name
    OriginalFileName: string,
    // Arguments which were passed to the executable associated with the main process
    CommandLine: string,
    // The path without the name of the image associated with the process
    CurrentDirectory: string,
    // Name of the account who created the process (child) . It usually contains domain name and user name (Parsed to show only username without the domain)
    User: string,
    // Logon GUID of the user who created the new process. Value that can help you correlate this event with others that contain the same Logon GUID (Sysmon Events)
    LogonGuid: string,
    // Login ID of the user who created the new process. Value that can help you correlate this event with others that contain the same Logon ID
    LogonId: count,
    // ID of the session the user belongs to
    TerminalSessionId: count,
    // Integrity label assigned to a process
    IntegrityLevel: string,
    // Hashes captured by sysmon driver
    Hashes: string,
    // ProcessGUID of the process that spawned/created the main process (child)
    ParentProcessGuid: string,
    // Process ID of the process that spawned/created the main process (child)
    ParentProcessId: count,
    // File path that spawned/created the main process
    ParentImage: string,
    // Arguments which were passed to the executable associated with the parent process
    ParentCommandLine: string,
}

// The process accessed event reports when a process opens another process, an
// operation that's often followed by information queries or reading and writing
// the address space of the target process. This enables detection of hacking
// tools that read the memory contents of processes like Local Security
// Authority (Lsass.exe) in order to steal credentials for use in Pass-the-Hash
// attacks. Enabling it can generate significant amounts of logging if there are
// diagnostic utilities active that repeatedly open processes to query their
// state, so it generally should only be done so with filters that remove
// expected accesses.
type sysmon.ProcessAccess = record {
    // custom tag mapped to event. i.e ATT&CK technique ID
    RuleName: string,
    // Time in UTC when event was created
    UtcTime: timestamp,
    // Process Guid of the source process that opened another process. It is derived from a truncated part of the machine GUID, the process start-time and the process token ID.
    SourceProcessGuid: string,
    // Process ID used by the os to identify the source process that opened another process. Derived partially from the EPROCESS kernel structure
    SourceProcessId: count,
    // ID of the specific thread inside of the source process that opened another process
    SourceThreadId: count,
    // File path of the source process that created a thread in another process
    SourceImage: string,
    // Process Guid of the target process
    TargetProcessGuid: string,
    // Process ID used by the os to identify the target process
    TargetProcessId: count,
    // File path of the target process
    TargetImage: string,
    // The access flags (bitmask) associated with the process rights requested for the target process
    GrantedAccess: string,
    // Stack trace of where open process is called. Included is the DLL and the relative virtual address of the functions in the call stack right before the open process call
    CallTrace: string,
}

// File create operations are logged when a file is created or overwritten. This
// event is useful for monitoring autostart locations, like the Startup folder,
// as well as temporary and download directories, which are common places
// malware drops during initial infection.
type sysmon.FileCreate = record {
    // custom tag mapped to event. i.e ATT&CK technique ID
    RuleName: string,
    // Time in UTC when event was created
    UtcTime: timestamp,
    // Process Guid of the process that created the file
    ProcessGuid: string,
    // Process ID used by the os to identify the process that created the file (child)
    ProcessId: count,
    // File path of the process that created the file
    Image: string,
    // Name of the file
    TargetFilename: string,
    // File creation time
    CreationUtcTime: timestamp,
}

// Registry key and value create and delete operations map to this event type,
// which can be useful for monitoring for changes to Registry autostart
// locations, or specific malware registry modifications.
type sysmon.RegistryEventObjectCreateAndDelete = record {
    // custom tag mapped to event. i.e ATT&CK technique ID
    RuleName: string,
    // registry event. Either Create or Delete
    EventType: string,
    // Time in UTC when event was created
    UtcTime: timestamp,
    // Process Guid of the process that created or deleted a registry key
    ProcessGuid: string,
    // Process ID used by the os to identify the process that created or deleted a registry key
    ProcessId: count,
    // File path of the process that created or deleted a registry key
    Image: string,
    // complete path of the registry key
    TargetObject: string,
}

// This Registry event type identifies Registry value modifications. The event
// records the value written for Registry values of type DWORD and QWORD.
type sysmon.RegistryEventValueSet = record {
    // custom tag mapped to event. i.e ATT&CK technique ID
    RuleName: string,
    // registry event. Registry values modifications
    EventType: string,
    // Time in UTC when event was created
    UtcTime: timestamp,
    // Process Guid of the process that modified a registry value
    ProcessGuid: string,
    // Process ID used by the os to identify the process that that modified a registry value
    ProcessId: count,
    // File path of the process that that modified a registry value
    Image: string,
    // complete path of the registry key
    TargetObject: string,
    // Details added to the registry key
    Details: string,
}

// Registry key and value rename operations map to this event type, recording
// the new name of the key or value that was renamed.
type sysmon.RegistryEventKeyAndValueRename = record {
    // custom tag mapped to event. i.e ATT&CK technique ID
    RuleName: string,
    // registry event. Registry key and value renamed
    EventType: string,
    // Time in UTC when event was created
    UtcTime: timestamp,
    // Process Guid of the process that renamed a registry value and key
    ProcessGuid: string,
    // Process ID used by the os to identify the process that renamed a registry value and key
    ProcessId: count,
    // File path of the process that renamed a registry value and key
    Image: string,
    // complete path of the registry key
    TargetObject: string,
    // new name of the registry key
    NewName: string,
}

// This event logs when a named file stream is created, and it generates events
// that log the hash of the contents of the file to which the stream is assigned
// (the unnamed stream), as well as the contents of the named stream. There are
// malware variants that drop their executables or configuration settings via
// browser downloads, and this event is aimed at capturing that based on the
// browser attaching a Zone.Identifier "mark of the web" stream.
type sysmon.FileCreateStreamHash = record {
    // custom tag mapped to event. i.e ATT&CK technique ID
    RuleName: string,
    // Time in UTC when event was created
    UtcTime: timestamp,
    // Process Guid of the process that created the named file stream
    ProcessGuid: string,
    // Process ID used by the os to identify the process that created the named file stream
    ProcessId: count,
    // File path of the process that created the named file stream
    Image: string,
    // Name of the file
    TargetFilename: string,
    // File download time
    CreationUtcTime: timestamp,
    // hash is a full hash of the file with the algorithms in the HashType field
    Hash: string,
}

// This event logs when the local sysmon configuration is updated.
type sysmon.SysmonConfigStateChanged = record {
    // Time in UTC when event was created
    UtcTime: timestamp,
    // name of the sysmon config file being updated
    Configuration: string,
    // hash (SHA1) of the sysmon config file being updated
    ConfigurationFileHash: string,
}

// This event generates when a named pipe is created. Malware often uses named
// pipes for interprocess communication.
type sysmon.PipeCreated = record {
    // TBD
    EventType: string,
    // custom tag mapped to event. i.e ATT&CK technique ID
    RuleName: string,
    // Time in UTC when event was created
    UtcTime: timestamp,
    // Process Guid of the process that created the pipe
    ProcessGuid: string,
    // Process ID used by the os to identify the process that created the pipe
    ProcessId: count,
    // Name of the pipe created
    PipeName: string,
    // File path of the process that created the pipe
    Image: string,
}

// This event logs when a named pipe connection is made between a client and a
// server.
type sysmon.PipeConnected = record {
    // TBD
    EventType: string,
    // custom tag mapped to event. i.e ATT&CK technique ID
    RuleName: string,
    // Time in UTC when event was created
    UtcTime: timestamp,
    // Process Guid of the process that connected the pipe
    ProcessGuid: string,
    // Process ID used by the os to identify the process that connected the pipe
    ProcessId: count,
    // Name of the pipe connecged
    PipeName: string,
    // File path of the process that connected the pipe
    Image: string,
}

// When a WMI event filter is registered, which is a method used by malware to
// execute, this event logs the WMI namespace, filter name and filter
// expression.
type sysmon.WmiEventFilter = record {
    // custom tag mapped to event. i.e ATT&CK technique ID
    RuleName: string,
    // wmievent type
    EventType: string,
    // Time in UTC when event was created
    UtcTime: timestamp,
    // wmievent filter operation
    Operation: string,
    // user that created the wmi filter
    User: string,
    // event namespace where the wmi clas
    EventNamespace: string,
    // Wmi filter name being created
    Name: string,
    // wmi filter query
    Query: string,
}

// The change file creation time event is registered when a file creation time
// is explicitly modified by a process. This event helps tracking the real
// creation time of a file. Attackers may change the file creation time of a
// backdoor to make it look like it was installed with the operating system.
// Note that many processes legitimately change the creation time of a file; it
// does not necessarily indicate malicious activity.
type sysmon.ProcessChangedFileCreationTime = record {
    // custom tag mapped to event. i.e ATT&CK technique ID
    RuleName: string,
    // Time in UTC when event was created
    UtcTime: timestamp,
    // Process Guid of the process that changed the file creation time
    ProcessGuid: string,
    // Process ID used by the os to identify the process changing the file creation time
    ProcessId: count,
    // File path of the process that changed the file creation time
    Image: string,
    // full path name of the file
    TargetFilename: string,
    // new creation time of the file
    CreationUtcTime: time,
    // previous creation time of the file
    PreviousCreationUtcTime: time,
}

// This event logs the registration of WMI consumers, recording the consumer
// name, log, and destination.
type sysmon.WmiEventConsumer = record {
    // custom tag mapped to event. i.e ATT&CK technique ID
    RuleName: string,
    // wmievent type
    EventType: string,
    // Time in UTC when event was created
    UtcTime: timestamp,
    // wmievent filter operation
    Operation: string,
    // user that created the wmi  consumer
    User: string,
    // name of the consumer created
    Name: string,
    // Type of wmi consumer
    Type: string,
    // command of consumer
    Destination: string,
}

// When a consumer binds to a filter, this event logs the consumer name and
// filter path.
type sysmon.WmiEventConsumerToFilter = record {
    // custom tag mapped to event. i.e ATT&CK technique ID
    RuleName: string,
    // wmievent type
    EventType: string,
    // Time in UTC when event was created
    UtcTime: timestamp,
    // wmievent filter operation
    Operation: string,
    // user that created the wmi filter
    User: string,
    // Consumer created to bind
    Consumer: string,
    // Filter created to bind
    Filter: string,
}

// This event generates when a process executes a DNS query, whether the result
// is successful or fails, cached or not.
type sysmon.DNSQuery = record {
    // custom tag mapped to event. i.e ATT&CK technique ID
    RuleName: string,
    // Time in UTC when event was created
    UtcTime: timestamp,
    // Process Guid of the process that executed the DNS query
    ProcessGuid: string,
    // Process id of the process that executed the DNS query
    ProcessId: count,
    // DNS query name
    QueryName: string,
    // DNS query status
    QueryStatus: string,
    // DNS query results
    QueryResults: string,
    // The full path related to the process that executed the DNS query
    Image: string,
}

// This event logs when a file is deleted by a process.
type sysmon.FileDelete = record {
    // custom tag mapped to event. i.e ATT&CK technique ID
    RuleName: string,
    // Time in UTC when event was created
    UtcTime: timestamp,
    // Process Guid of the process that deleted the file
    ProcessGuid: string,
    // Process ID used by the os to identify the process that deleted the file
    ProcessId: count,
    // File path of the process that deleted the file
    Image: string,
    // Name of the account who deleted the file.
    User: string,
    // full path name of the deleted file
    TargetFilename: string,
    // Hashes captured by sysmon driver of the deleted file
    Hashes: string,
    // TBD
    IsExecutable: bool,
    // States if the file was archived when deleted
    Archived: string,
}

// The network connection event logs TCP/UDP connections on the machine. It is
// disabled by default. Each connection is linked to a process through the
// ProcessId and ProcessGUID fields. The event also contains the source and
// destination host names IP addresses, port numbers and IPv6 status.
type sysmon.NetworkConnection = record {
    // custom tag mapped to event. i.e ATT&CK technique ID
    RuleName: string,
    // Time in UTC when event was created
    UtcTime: timestamp,
    // Process Guid of the process that made the network connection
    ProcessGuid: string,
    // Process ID used by the os to identify the process that made the network connection
    ProcessId: count,
    // File path of the process that made the network connection
    Image: string,
    // Name of the account who made the network connection. It usually containes domain name and user name
    User: string,
    // Protocol being used for the network connection
    Protocol: string,
    // Indicated process initiated tcp connection
    Initiated: bool,
    // is the source ip an Ipv6
    SourceIsIpv6: bool,
    // source ip address that made the network connection
    SourceIp: addr,
    // name of the host that made the network connection
    SourceHostname: string,
    // source port number
    SourcePort: port,
    // name of the source port being used (i.e. netbios-dgm)
    SourcePortName: string,
    // is the destination ip an Ipv6
    DestinationIsIpv6: bool,
    // ip address destination
    DestinationIp: addr,
    // name of the host that received the network connection
    DestinationHostname: string,
    // destination port number
    DestinationPort: port,
    // name of the destination port
    DestinationPortName: string,
}

// The service state change event reports the state of the Sysmon service
// (started or stopped).
type sysmon.SysmonServiceStateChanged = record {
    // Time in UTC when event was created
    UtcTime: timestamp,
    // sysmon service state (i.e. stopped)
    State: string,
    // sysmon version
    Version: string,
    // sysmon config schema version
    SchemaVersion: string,
}

// The process terminate event reports when a process terminates. It provides
// the UtcTime, ProcessGuid and ProcessId of the process.
type sysmon.ProcessTerminated = record {
    // custom tag mapped to event. i.e ATT&CK technique ID
    RuleName: string,
    // Time in UTC when event was created
    UtcTime: timestamp,
    // Process Guid of the process that terminated
    ProcessGuid: string,
    // Process ID used by the os to identify the process that terminated
    ProcessId: count,
    // File path of the process that terminated
    Image: string,
}

// The driver loaded events provides information about a driver being loaded on
// the system. The configured hashes are provided as well as signature
// information. The signature is created asynchronously for performance reasons
// and indicates if the file was removed after loading.
type sysmon.DriverLoaded = record {
    // custom tag mapped to event. i.e ATT&CK technique ID
    RuleName: string,
    // Time in UTC when event was created
    UtcTime: timestamp,
    // full path of the driver loaded
    ImageLoaded: string,
    // Hashes captured by sysmon driver
    Hashes: string,
    // is the driver loaded signed
    Signed: bool,
    // The signer
    Signature: string,
    // status of the signature (i.e valid)
    SignatureStatus: string,
}

// The image loaded event logs when a module is loaded in a specific process.
// This event is disabled by default and needs to be configured with the -l
// option. It indicates the process in which the module is loaded, hashes and
// signature information. The signature is created asynchronously for
// performance reasons and indicates if the file was removed after loading. This
// event should be configured carefully, as monitoring all image load events
// will generate a large number of events.
type sysmon.ImageLoaded = record {
    // custom tag mapped to event. i.e ATT&CK technique ID
    RuleName: string,
    // Time in UTC when event was created
    UtcTime: timestamp,
    // Process Guid of the process that loaded the image
    ProcessGuid: string,
    // Process ID used by the os to identify the process that loaded the image
    ProcessId: count,
    // File path of the process that loaded the image
    Image: string,
    // full path of the image loaded
    ImageLoaded: string,
    // Version of the image loaded
    FileVersion: string,
    // Description of the image loaded
    Description: string,
    // Product name the image loaded belongs to
    Product: string,
    // Company name the image loaded belongs to
    Company: string,
    // original file name
    OriginalFileName: string,
    // hash is a full hash of the file with the algorithms in the HashType field
    Hashes: string,
    // is the image loaded signed
    Signed: bool,
    // The signer
    Signature: string,
    // status of the signature (i.e valid)
    SignatureStatus: string,
}

// The CreateRemoteThread event detects when a process creates a thread in
// another process. This technique is used by malware to inject code and hide in
// other processes. The event indicates the source and target process. It gives
// information on the code that will be run in the new thread: StartAddress,
// StartModule and StartFunction. Note that StartModule and StartFunction fields
// are inferred, they might be empty if the starting address is outside loaded
// modules or known exported functions.
type sysmon.CreateRemoteThread = record {
    // custom tag mapped to event. i.e ATT&CK technique ID
    RuleName: string,
    // Time in UTC when event was created
    UtcTime: timestamp,
    // Process Guid of the source process that created a thread in another process
    SourceProcessGuid: string,
    // Process ID used by the os to identify the source process that created a thread in another process
    SourceProcessId: count,
    // File path of the source process that created a thread in another process
    SourceImage: string,
    // Process Guid of the target process
    TargetProcessGuid: string,
    // Process ID used by the os to identify the target process
    TargetProcessId: count,
    // File path of the target process
    TargetImage: string,
    // Id of the new thread created in the target process
    NewThreadId: count,
    // New thread start address
    StartAddress: string,
    // Start module determined from thread start address mapping to PEB loaded module list
    StartModule: string,
    // Start function is reported if exact match to function in image export table
    StartFunction: string,
}

// The RawAccessRead event detects when a process conducts reading operations
// from the drive using the .\ denotation. This technique is often used by
// malware for data exfiltration of files that are locked for reading, as well
// as to avoid file access auditing tools. The event indicates the source
// process and target device.
type sysmon.RawAccessRead = record {
    // custom tag mapped to event. i.e ATT&CK technique ID
    RuleName: string,
    // Time in UTC when event was created
    UtcTime: timestamp,
    // Process Guid of the process that conducted reading operations from the drive
    ProcessGuid: string,
    // Process ID used by the os to identify the process that conducted reading operations from the drive
    ProcessId: count,
    // File path of the process that conducted reading operations from the drive
    Image: string,
    // Target device
    Device: string,
}

// The following beats type definitions wrap the above raw sysmon events.
// They are effectively a carrier of the Sysmon data that comes with some
// additional meta data.
// This configuration assumes that Sysmon events are wrapped in a JSON struct
// that looks as follows:
// {
//   "event_data": { ... },
//   "meta_data": { ... },
// }
// The `event_data` field wraps the Sysmon data. The `meta_data` field should
// contain the fields `instance_id`, `hostname`, and `event_id` to comply with
// this schema.
// An example logstash filter configuration that generates `meta_data` and
// `event_data` fields in the JSON output could look like this:
//
//     filter {
//       if [winlog][provider_name] == "Microsoft-Windows-Sysmon" {
//         mutate {
//           add_tag => [ "meta_data" ]
//           copy => { "[winlog][event_data]" => "event_data" }
//           copy => { "[cloud][instance][id]" => "[meta_data][instance_id]" }
//           copy => { "[agent][hostname]" => "[meta_data][hostname]" }
//           copy => { "[winlog][event_id]" => "[meta_data][event_id]" }
//           copy => { "[community_id]" => "[meta_data][community_id]" }
//         }
//         prune {
//           whitelist_names => [ "event_data", "meta_data" ]
//         }
//       }
//     }

type winlogbeat.meta_data = record {
  instance_id: string #index=hash,
  hostname: string,
  event_id: count,
}

type winlogbeat.network_meta_data = record {
  instance_id: string #index=hash,
  hostname: string,
  community_id: string #index=hash,
  event_id: count,
}

type winlogbeat.ProcessCreation = record {
  meta_data: winlogbeat.meta_data,
  event_data: sysmon.ProcessCreation,
}

type winlogbeat.ProcessAccess = record {
  meta_data: winlogbeat.meta_data,
  event_data: sysmon.ProcessAccess,
}

type winlogbeat.FileCreate = record {
  meta_data: winlogbeat.meta_data,
  event_data: sysmon.FileCreate,
}

type winlogbeat.RegistryEventObjectCreateAndDelete = record {
  meta_data: winlogbeat.meta_data,
  event_data: sysmon.RegistryEventObjectCreateAndDelete,
}

type winlogbeat.RegistryEventValueSet = record {
  meta_data: winlogbeat.meta_data,
  event_data: sysmon.RegistryEventValueSet,
}

type winlogbeat.RegistryEventKeyAndValueRename = record {
  meta_data: winlogbeat.meta_data,
  event_data: sysmon.RegistryEventKeyAndValueRename,
}

type winlogbeat.FileCreateStreamHash = record {
  meta_data: winlogbeat.meta_data,
  event_data: sysmon.FileCreateStreamHash,
}

type winlogbeat.SysmonConfigStateChanged = record {
  meta_data: winlogbeat.meta_data,
  event_data: sysmon.SysmonConfigStateChanged,
}

type winlogbeat.PipeCreated = record {
  meta_data: winlogbeat.meta_data,
  event_data: sysmon.PipeCreated,
}

type winlogbeat.PipeConnected = record {
  meta_data: winlogbeat.meta_data,
  event_data: sysmon.PipeConnected,
}

type winlogbeat.WmiEventFilter = record {
  meta_data: winlogbeat.meta_data,
  event_data: sysmon.WmiEventFilter,
}

type winlogbeat.ProcessChangedFileCreationTime = record {
  meta_data: winlogbeat.meta_data,
  event_data: sysmon.ProcessChangedFileCreationTime,
}

type winlogbeat.WmiEventConsumer = record {
  meta_data: winlogbeat.meta_data,
  event_data: sysmon.WmiEventConsumer,
}

type winlogbeat.WmiEventConsumerToFilter = record {
  meta_data: winlogbeat.meta_data,
  event_data: sysmon.WmiEventConsumerToFilter,
}

type winlogbeat.DNSQuery = record {
  meta_data: winlogbeat.meta_data,
  event_data: sysmon.DNSQuery,
}

type winlogbeat.FileDelete = record {
  meta_data: winlogbeat.meta_data,
  event_data: sysmon.FileDelete,
}

type winlogbeat.NetworkConnection = record {
  meta_data: winlogbeat.network_meta_data,
  event_data: sysmon.NetworkConnection,
}

type winlogbeat.SysmonServiceStateChanged = record {
  meta_data: winlogbeat.meta_data,
  event_data: sysmon.SysmonServiceStateChanged,
}

type winlogbeat.ProcessTerminated = record {
  meta_data: winlogbeat.meta_data,
  event_data: sysmon.ProcessTerminated,
}

type winlogbeat.DriverLoaded = record {
  meta_data: winlogbeat.meta_data,
  event_data: sysmon.DriverLoaded,
}

type winlogbeat.ImageLoaded = record {
  meta_data: winlogbeat.meta_data,
  event_data: sysmon.ImageLoaded,
}

type winlogbeat.CreateRemoteThread = record {
  meta_data: winlogbeat.meta_data,
  event_data: sysmon.CreateRemoteThread,
}

type winlogbeat.RawAccessRead = record {
  meta_data: winlogbeat.meta_data,
  event_data: sysmon.RawAccessRead,
}
